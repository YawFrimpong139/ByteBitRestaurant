package org.codewithzea.restaurantservice.tests;

import org.codewithzea.restaurantservice.dto.request.AddressRequest;
import org.codewithzea.restaurantservice.dto.request.RestaurantRequest;
import org.codewithzea.restaurantservice.dto.response.RestaurantResponse;
import org.codewithzea.restaurantservice.event.RestaurantEventPublisher;
import org.codewithzea.restaurantservice.exception.RestaurantNotFoundException;
import org.codewithzea.restaurantservice.exception.UnauthorizedAccessException;
import org.codewithzea.restaurantservice.model.Address;
import org.codewithzea.restaurantservice.model.Restaurant;
import org.codewithzea.restaurantservice.repository.RestaurantRepository;
import org.codewithzea.restaurantservice.service.RestaurantService;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;

import java.util.Collections;
import java.util.Optional;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class RestaurantServiceTest {

    @Mock
    private RestaurantRepository restaurantRepository;
    @Mock
    private RestaurantEventPublisher eventPublisher;

    @InjectMocks
    private RestaurantService restaurantService;

    private final UUID restaurantId = UUID.randomUUID();
    private final String ownerId = "user123";

    // Tests that don't need authentication
    @Test
    void getRestaurantById_ShouldReturnRestaurant_WhenExists() {
        // Arrange
        Restaurant restaurant = createTestRestaurant();
        when(restaurantRepository.findById(restaurantId))
                .thenReturn(Optional.of(restaurant));

        // Act
        RestaurantResponse response = restaurantService.getRestaurantById(restaurantId);

        // Assert
        assertNotNull(response);
        assertEquals(restaurant.getName(), response.name());
        verify(restaurantRepository).findById(restaurantId);
    }

    @Test
    void getRestaurantById_ShouldThrowException_WhenNotFound() {
        // Arrange
        when(restaurantRepository.findById(restaurantId))
                .thenReturn(Optional.empty());

        // Act & Assert
        assertThrows(RestaurantNotFoundException.class, () ->
                restaurantService.getRestaurantById(restaurantId));
    }

    @Test
    void getAllRestaurants_ShouldReturnPage() {
        // Arrange
        Pageable pageable = Pageable.ofSize(10);
        Restaurant restaurant = createTestRestaurant();
        Page<Restaurant> page = new PageImpl<>(Collections.singletonList(restaurant));

        when(restaurantRepository.findAll(pageable))
                .thenReturn(page);

        // Act
        Page<RestaurantResponse> result = restaurantService.getAllRestaurants(pageable, null);

        // Assert
        assertEquals(1, result.getTotalElements());
        verify(restaurantRepository).findAll(pageable);
    }

    // Tests that need authentication
    @Test
    void createRestaurant_ShouldSaveAndReturnRestaurant() {
        // Arrange
        setupSecurityContext(ownerId);
        RestaurantRequest request = createTestRequest();

        // Simulate the saved entity with an ID
        when(restaurantRepository.save(any(Restaurant.class)))
                .thenAnswer(invocation -> {
                    Restaurant restaurant = invocation.getArgument(0);
                    restaurant.setId(restaurantId); // Set the ID that would be generated by DB
                    return restaurant;
                });

        // Act
        RestaurantResponse response = restaurantService.createRestaurant(request);

        // Assert
        assertNotNull(response);
        assertEquals(restaurantId.toString(), response.id());
        assertEquals(request.name(), response.name());
        verify(restaurantRepository).save(any(Restaurant.class));
        verify(eventPublisher).publishRestaurantCreatedEvent(any(Restaurant.class));
    }

    @Test
    void updateRestaurant_ShouldUpdate_WhenOwnerMatches() {
        // Arrange
        setupSecurityContext(ownerId);
        Restaurant restaurant = createTestRestaurant();
        RestaurantRequest request = createTestRequest();

        when(restaurantRepository.existsByIdAndOwnerId(restaurantId, ownerId))
                .thenReturn(true);
        when(restaurantRepository.findById(restaurantId))
                .thenReturn(Optional.of(restaurant));
        when(restaurantRepository.save(any(Restaurant.class)))
                .thenAnswer(invocation -> invocation.getArgument(0));

        // Act
        restaurantService.updateRestaurant(restaurantId, request);

        // Assert
        verify(restaurantRepository).save(any(Restaurant.class));
        verify(eventPublisher).publishRestaurantUpdatedEvent(any(Restaurant.class));
    }

    @Test
    void updateRestaurant_ShouldThrowException_WhenNotOwner() {
        // Arrange
        setupSecurityContext(ownerId);
        when(restaurantRepository.existsByIdAndOwnerId(restaurantId, ownerId))
                .thenReturn(false);

        // Act & Assert
        assertThrows(UnauthorizedAccessException.class, () ->
                restaurantService.updateRestaurant(restaurantId, createTestRequest()));
    }

    // Helper methods
    private void setupSecurityContext(String username) {
        SecurityContext securityContext = mock(SecurityContext.class);
        Authentication authentication = mock(Authentication.class);
        when(securityContext.getAuthentication()).thenReturn(authentication);
        when(authentication.getName()).thenReturn(username);
        SecurityContextHolder.setContext(securityContext);
    }

    @AfterEach
    void tearDown() {
        SecurityContextHolder.clearContext();
    }

    private Restaurant createTestRestaurant() {
        return Restaurant.builder()
                .id(restaurantId)
                .name("Test Restaurant")
                .email("test@example.com")
                .phone("1234567890")
                .ownerId(ownerId)
                .address(Address.builder()
                        .street("123 Main St")
                        .city("Testville")
                        .state("TS")
                        .zipCode("12345")
                        .country("Testland")
                        .build())
                .build();
    }

    private RestaurantRequest createTestRequest() {
        return new RestaurantRequest(
                "Test Restaurant",
                "test@example.com",
                "1234567890",
                new AddressRequest(
                        "123 Main St",
                        "Testville",
                        "TS",
                        "12345",
                        "Testland"
                )
        );
    }
}